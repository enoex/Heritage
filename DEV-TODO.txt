# TODO #
### World ###
-Extract world logic from component to system
    -Write unit tests for it
    -Think of better system to config world size. Maybe in game?
    -getNeighbors to system?
✓ list of neighbors could be IDs instead of entity objects

### getNeighbor calls ###
-convert all to use IDs
-cache instead of call directly (check neighborsByRange first)

### Combat ###
-Make combat not suck
    -Maybe shrink / grow entities based on health? 
        -Some other dimension should show health
✓ Fix combat issues

### SYSTEMS ###
-store IDs in entitiesIndex instead of entity objects, convert all systems to 
use IDs

### Zombies ###
-Don't let them die so fast

### Humans ###
-Tweak birth parameters
    -Should reach a stable population over time, not taper off.

### Stamina / energy component ? ###
-Track run speed / energy??

### RESOURCES ###
-Put in some sort of resource spawning
    -Randomly spawn resources? When entities go over resource, it depletes 
    a little?
    -Resource decay / resource spawning
        -For now, let decay by entities consuming and spawn randomly?

### Renderer ###
-Extract camera to own system?
    -Camera is a subsystem maybe
-Fix wrapping. Doesn't work 100% yet
    -Write unit test for wrapping logic
-Put back in various strokes for pregnant / can attack


### Analysis ###
-More robust logging, analysis

## GENERAL ##
-Clean up code, make sure all functions return proper values

## OPTIMIZATIONS ##
-Make entitiesIndex an array of IDs (ints or strings?) instead of
objects
-Dont store circular references, allow game.entities to be JSON.stringifyible


*GENERAL*
-Create a few well defined object types
-Give functions constant data
-try to make it type stable
-use v8 flags

* GARBAGE COLLECTION *
in general, have objects that live a very hort time or a very long time
release references 
