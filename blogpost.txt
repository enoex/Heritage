Entity Component System
-----------------------------------------
Entity - Component - System (ECS) is another programming concept, like Object
Oriented Programming or Functional Programming.  It's fundementally different
though, just how funcitonal programming is fundementally different than Object
Oriented Programming.  ECS is a form of data driven programming - where the emphasis
is placed on data, as opposed to in OOP where the emphasis is placed on Objects.

Managing complexity is the root of most programming challenges. Programming 
patterns exist to help you manage complexity.

The problems of developing games are a bit different than the problems of 
developing other types of application, so it makes sense that there might exist 
a better tool than the ones used for other types of development work. 

With OOP, data encapsulation is a big concept - you usually don't want to share
data between objects.  All the inner workings of objects are hidden from you.
You usually don't want an object's data to change outside of that object itself
changing it (through some interface or method call).

ECS sort of flips this idea around.  ECS is a form of Data Driven Programming.
With ECS, data is freely exposed and can be mutated.  OOP and ECS are inheriently
incompatible - they're two different metaphors for how you structure your program.
There is a lot of value in having your game code be data driven - from adding and modifying
behaviors at runtime, changing data after your code is compiled, etc.
Chances are if you know about ECS you know the benfits, but if you're trying to wrap
your head around ECS like I am, understanding the concept might help.

ECS is built on three concepts - Entities, Components, and Systems.

ENTITES
An entity represents something in your game world.  However, they don't have
data.  They are basically just an ID and a collection of Components.  You don't
actually "do" anything to an entity.  There's no "entity.swingSword()" method,
because entities themselves are just a collection of components.

COMPONENTS
A component is data.  

Let's say we want to define a "human" entity.  It
would be built from numerous components (this is where "object composition" comes
into play). So, the entity would have components like:
    -health
    -age
    -position
    -renderable

Each component just contains data.  The position component might contain an x
and y value.  The renderable component might just contain a BOOLEAN with a value
of TRUE.

One key concept here is that components don't know about other components, and
components don't contain logic.  You might have some getter or setter functions
to help access the data, but ideally a component is nothing but data.

SYSTEMS
Systems perform logic based on components.  They're the 'drivers' of the
data-driven concept (and the data is the cars? maybe this analogy isn't so
obvious).
A system will do stuff to entities that have some component. And when I mean
"do stuff to entities", I actually mean "do stuff to the components an entity
contains".  An entity itself doesn't have any data, the data lives in the components.


-can change components at runtime, which means behaviors can change.
