// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['entity', 'entities', 'components/all', 'systems/all', 'assemblages/assemblages', 'lib/d3'], function(Entity, Entities, Components, Systems, Assemblages, d3) {
    var Game;
    Game = (function() {

      function Game() {
        this.gameLoop = __bind(this.gameLoop, this);

        var _this = this;
        this.entities = new Entities();
        this.systems = new Systems(this.entities).systems;
        this.numTicks = 0;
        this.paused = false;
        document.addEventListener('keydown', function(e) {
          if (e.keyCode === 32) {
            _this.paused = !_this.paused;
            if (!_this.paused) {
              return _this.gameLoop();
            }
          } else {
            return _this.paused = false;
          }
        });
      }

      Game.prototype.start = function() {
        var entity, i;
        i = 0;
        entity = Assemblages.human();
        entity.addComponent('userMovable');
        entity.components.position.x = 250;
        entity.components.position.y = 250;
        entity.components.human.age = 20;
        this.entities.add(entity);
        while (i < 50) {
          if (Math.random() < 0.3) {
            entity = Assemblages.zombie();
            entity.components.combat.attack = Math.random() * 10 | 0;
            entity.components.combat.defense = Math.random() * 5 | 0;
          } else {
            entity = Assemblages.human();
            entity.components.human.age = d3.random.normal(20, 10)();
          }
          entity.components.position.x = Math.random() * 500 | 0;
          entity.components.position.y = Math.random() * 500 | 0;
          this.entities.add(entity);
          i++;
        }
        return this.gameLoop();
      };

      Game.prototype.gameLoop = function() {
        var system, _i, _len, _ref;
        if (this.paused) {
          return true;
        }
        requestAnimFrame(this.gameLoop);
        _ref = this.systems;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          system = _ref[_i];
          if (system.tick) {
            system.tick(this.numTicks);
          }
        }
        return this.numTicks += 1;
      };

      return Game;

    })();
    return Game;
  });

}).call(this);
