// Generated by CoffeeScript 1.4.0
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define([], function() {
    var World, canvas, canvasHeight, canvasWidth, context;
    canvas = document.getElementById('canvas');
    context = canvas.getContext('2d');
    canvasWidth = canvas.width;
    canvasHeight = canvas.height;
    World = (function() {

      World.width = canvasWidth * 4;

      World.height = canvasHeight * 4;

      World.canvas = canvas;

      World.context = context;

      World.grid = {};

      World.cellSize = 6;

      World.rows = Math.floor(World.height / World.cellSize);

      World.columns = Math.floor(World.width / World.cellSize);

      function World(entity, params) {
        params = params || {};
        this.entity = entity;
        this.width = params.width || World.width;
        this.height = params.height || World.width;
        this.canvas = params.canvas || World.canvas;
        this.context = params.context || World.context;
        this.neighborsByRadius = [];
        return this;
      }

      World.prototype.getNeighbors = function(radius) {
        var neighbors;
        if (radius != null) {
          radius = radius;
        } else {
          radius = 1;
        }
        if (radius < 1) {
          radius = 0;
        }
        neighbors = [];
        if (this.neighborsByRadius[radius]) {
          neighbors = this.neighborsByRadius[radius];
        } else {
          neighbors = this.calculateNeighbors(radius);
          this.neighborsByRadius[radius] = neighbors;
        }
        return neighbors;
      };

      World.prototype.calculateNeighbors = function(radius) {
        var entityId, i, j, neighbors, targetEntities, targetI, targetJ, _i, _j, _k, _l, _len, _len1;
        neighbors = [];
        if (radius === 0) {
          if (World.grid[this.i] && World.grid[this.i][this.j]) {
            targetEntities = World.grid[this.i][this.j];
            for (_i = 0, _len = targetEntities.length; _i < _len; _i++) {
              entityId = targetEntities[_i];
              if (entityId !== this.entity.id) {
                neighbors.push(entityId);
              }
            }
          }
        } else {
          for (i = _j = -radius; _j <= radius; i = _j += 1) {
            for (j = _k = -radius; _k <= radius; j = _k += 1) {
              targetI = this.i + i;
              targetJ = this.j + j;
              if (targetI > World.rows) {
                targetI = targetI % World.rows;
              }
              if (targetI < 0) {
                targetI = World.rows + targetI;
              }
              if (targetJ > World.columns) {
                targetJ = targetJ % World.columns;
              }
              if (targetJ < 0) {
                targetJ = World.columns + targetJ;
              }
              if (World.grid[targetI] && World.grid[targetI][targetJ]) {
                targetEntities = World.grid[targetI][targetJ];
                for (_l = 0, _len1 = targetEntities.length; _l < _len1; _l++) {
                  entityId = targetEntities[_l];
                  if (entityId !== this.entity.id) {
                    if (__indexOf.call(neighbors, entityId) < 0) {
                      neighbors.push(entityId);
                    }
                  }
                }
              }
            }
          }
        }
        return neighbors;
      };

      return World;

    })();
    return World;
  });

}).call(this);
