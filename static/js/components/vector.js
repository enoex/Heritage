// Generated by CoffeeScript 1.4.0
(function() {

  define([], function() {
    var Vector;
    Vector = (function() {

      function Vector(x, y) {
        this.x = x || 0;
        this.y = y || 0;
      }

      Vector.prototype.copy = function() {
        return new Vector(this.x, this.y);
      };

      Vector.prototype.set = function(x, y) {
        this.x = x;
        return this.y = y;
      };

      Vector.prototype.add = function(vector, vector2) {
        var returnVector;
        if (!vector2) {
          if (typeof vector !== 'number') {
            this.x += vector.x;
            this.y += vector.y;
          } else {
            this.x += vector;
            this.y += vector;
          }
          returnVector = this;
        } else {
          if (typeof vector2 !== 'number') {
            returnVector = new Vector(vector.x + vector2.x, vector.y + vector2.y);
          } else {
            returnVector = new Vector(vector.x + vector2, vector.y + vector2);
          }
        }
        return returnVector;
      };

      Vector.prototype.subtract = function(vector, vector2) {
        var returnVector;
        if (!vector2) {
          if (typeof vector !== 'number') {
            this.x -= vector.x;
            this.y -= vector.y;
          } else {
            this.x -= vector;
            this.y -= vector;
          }
          returnVector = this;
        } else {
          if (typeof vector2 !== 'number') {
            returnVector = new Vector(vector.x - vector2.x, vector.y - vector2.y);
          } else {
            returnVector = new Vector(vector.x - vector2, vector.y - vector2);
          }
        }
        return returnVector;
      };

      Vector.prototype.multiply = function(scalar) {
        this.x *= scalar;
        this.y *= scalar;
        return this;
      };

      Vector.prototype.divide = function(scalar) {
        if (scalar !== 0) {
          this.x /= scalar;
        }
        if (scalar !== 0) {
          this.y /= scalar;
        }
        return this;
      };

      Vector.prototype.magnitude = function() {
        return Math.sqrt((this.x * this.x) + (this.y * this.y));
      };

      Vector.prototype.magnitudeSquared = function() {
        return (this.x * this.x) + (this.y * this.y);
      };

      Vector.prototype.limit = function(max) {
        var magnitude;
        magnitude = this.magnitude();
        if (Math.abs(magnitude) > max) {
          this.divide(magnitude);
          this.multiply(max);
        }
        return this;
      };

      Vector.prototype.normalize = function() {
        var magnitude;
        magnitude = this.magnitude();
        if (magnitude !== 0) {
          this.divide(magnitude);
        }
        return this;
      };

      Vector.prototype.dotProduct = function(vector1, vector2) {
        var dot;
        if (!vector2) {
          dot = (this.x * vector1.x) + (this.y * vector1.y);
        } else {
          dot = (vector1.x * vector2.x) + (vector1.y * vector2.y);
        }
        return dot;
      };

      Vector.prototype.angle = function(vector1, vector2) {
        var angle, dot;
        if (!vector2) {
          vector2 = vector1;
          vector1 = this;
        }
        dot = vector1.dotProduct(vector1, vector2);
        angle = Math.acos(dot / (vector1.magnitude() * vector2.magnitude()));
        angle = angle * (180 / Math.PI);
        if (!angle) {
          angle = 0;
        }
        return angle;
      };

      Vector.prototype.distance = function(vector1, vector2) {
        var dist;
        if (!vector2) {
          vector2 = vector1;
          vector1 = this;
        }
        dist = Math.sqrt(Math.pow(vector1.x - vector2.x, 2) + Math.pow(vector1.y - vector2.y, 2));
        return dist;
      };

      return Vector;

    })();
    return Vector;
  });

}).call(this);
