// Generated by CoffeeScript 1.4.0
(function() {

  define(['entity', 'components/vector', 'world'], function(Entity, Vector, world) {
    describe('Entity: Setup', function() {
      it('should successfully create a new entity', function() {
        var entity, entity2;
        entity = new Entity();
        entity2 = new Entity();
        entity.should.not.equal(void 0);
        return entity.draw.should.equal(entity2.draw);
      });
      return it('should successfully create a new entity with some properties', function() {
        var entity;
        entity = new Entity();
        entity.position.should.not.equal(void 0);
        entity.velocity.should.not.equal(void 0);
        entity.acceleration.should.not.equal(void 0);
        entity.maxForce.should.not.equal(void 0);
        entity.maxSpeed.should.not.equal(void 0);
        entity.health.should.not.equal(void 0);
        return entity.food.should.not.equal(void 0);
      });
    });
    return describe('Entity: checkEdges', function() {
      return it('should wrap around edges', function() {
        var entity;
        entity = new Entity({
          position: new Vector(0, 0),
          positionMax: new Vector(30, 30)
        });
        entity.checkEdges();
        entity.position.x.should.equal(0);
        entity.position.y.should.equal(0);
        entity.position = new Vector(31, 31);
        entity.checkEdges();
        entity.position.x.should.equal(1);
        entity.position.y.should.equal(1);
        entity.position = new Vector(30, 30);
        entity.checkEdges();
        entity.position.x.should.equal(0);
        entity.position.y.should.equal(0);
        entity.position = new Vector(-1, -1);
        entity.checkEdges();
        entity.position.x.should.equal(29);
        entity.position.y.should.equal(29);
        entity.updatePositionGrid();
        entity.positionGrid.i.should.equal(2);
        return entity.positionGrid.j.should.equal(2);
      });
    });
  });

}).call(this);
