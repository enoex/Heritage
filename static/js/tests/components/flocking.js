// Generated by CoffeeScript 1.4.0
(function() {

  define(['components/vector', 'components/flocking', 'entities', 'entity'], function(Vector, Flocking, Entities, Entity) {
    return describe('Flocking: main flock() tests', function() {
      it('should update position after calling flock()', function() {
        var a, b, entities;
        entities = new Entities();
        a = new Entity();
        a.addComponent('position');
        a.addComponent('physics');
        a.addComponent('flocking');
        a.components.position.x = 4;
        a.components.position.y = 4;
        b = new Entity();
        b.addComponent('position');
        b.addComponent('physics');
        b.addComponent('flocking');
        b.components.position.x = 10;
        b.components.position.y = 10;
        entities.add(a);
        entities.add(b);
        a.components.flocking.flock(entities.entitiesIndex.flocking);
        a.components.position.x.should.equal(4);
        return a.components.position.y.should.equal(4);
      });
      return describe('Flocking: separate() tests', function() {
        return it('should define proper separate() behavior', function() {
          var a, b, entities, force;
          entities = new Entities();
          a = new Entity();
          a.addComponent('position');
          a.addComponent('physics');
          a.addComponent('flocking');
          a.components.position.x = 4;
          a.components.position.y = 4;
          b = new Entity();
          b.addComponent('position');
          b.addComponent('physics');
          b.addComponent('flocking');
          b.components.position.x = 10;
          b.components.position.y = 10;
          entities.add(a).add(b);
          force = a.components.flocking.separate(entities.entitiesIndex.flocking);
          force.x.should.not.equal(void 0);
          return force.y.should.not.equal(void 0);
        });
      });
    });
  });

}).call(this);
