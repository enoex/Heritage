// Generated by CoffeeScript 1.4.0
(function() {

  define(['components/vector'], function(Vector) {
    describe('Vector: Base Functions', function() {
      it('should successfully create a new vector', function() {
        var vector;
        vector = new Vector();
        vector.x.should.not.equal(void 0);
        return vector.y.should.not.equal(void 0);
      });
      return it('should copy successfully', function() {
        var vector, vector2;
        vector = new Vector(10, 10);
        vector.x.should.equal(10);
        vector.y.should.equal(10);
        vector2 = vector.copy();
        vector2.should.not.be.vector;
        vector2.should.not.equal(vector);
        vector2.x.should.equal(10);
        vector2.y.should.equal(10);
        vector2.add(2);
        vector2.x.should.equal(12);
        vector2.y.should.equal(12);
        vector.x.should.equal(10);
        return vector.y.should.equal(10);
      });
    });
    describe('Vector: Addition', function() {
      it('should add two vectors together (in place)', function() {
        var vector1, vector2, vectorResult;
        vector1 = new Vector(1, 1);
        vector2 = new Vector(1, 1);
        vectorResult = vector1.add(vector2);
        vector1.x.should.equal(2);
        vector1.y.should.equal(2);
        vectorResult.should.equal(vector1);
        vectorResult.should.deep.equal(vector1);
        vectorResult.should.not.equal(vector2);
        vector2.x.should.equal(1);
        vector2.y.should.equal(1);
        vector1.add(vector2);
        vector1.x.should.equal(3);
        vector1.y.should.equal(3);
        vector2.x.should.equal(1);
        return vector2.y.should.equal(1);
      });
      it('should add a scalar and a vector', function() {
        var vector1, vectorResult;
        vector1 = new Vector(1, 1);
        vectorResult = vector1.add(3);
        vectorResult.should.be.vector1;
        vectorResult.should.deep.equal(vector1);
        vector1.x.should.equal(4);
        return vector1.y.should.equal(4);
      });
      it('should add two vectors together (new vector)', function() {
        var vector1, vector2, vector4, vectorResult;
        vector1 = new Vector(1, 1);
        vector2 = new Vector(1, 1);
        vectorResult = vector1.add(vector1, vector2);
        vectorResult.should.not.equal(vector1);
        vectorResult.should.not.deep.equal(vector1);
        vectorResult.should.not.equal(vector2);
        vectorResult.should.not.deep.equal(vector2);
        vectorResult.x.should.equal(2);
        vectorResult.y.should.equal(2);
        vector4 = Vector.prototype.add(vector1, vector2);
        vector1.x.should.equal(1);
        vector1.y.should.equal(1);
        vector2.x.should.equal(1);
        vector2.y.should.equal(1);
        vector4.x.should.equal(2);
        return vector4.y.should.equal(2);
      });
      return it('should add a vector and scalar together (new vector)', function() {
        var vector1, vector2, vectorResult;
        vector1 = new Vector(1, 1);
        vectorResult = vector1.add(vector1, 5);
        vectorResult.should.not.equal(vector1);
        vectorResult.should.not.deep.equal(vector1);
        vectorResult.x.should.equal(6);
        vectorResult.y.should.equal(6);
        vector2 = Vector.prototype.add(vector1, 5);
        vector1.x.should.equal(1);
        vector1.y.should.equal(1);
        vector2.x.should.equal(6);
        vector2.y.should.equal(6);
        vector2.should.not.equal(vector1);
        return vector2.should.not.deep.equal(vector1);
      });
    });
    describe('Vector: Subtraction', function() {
      it('should subtract two vectors together (in place)', function() {
        var vector1, vector2, vectorResult;
        vector1 = new Vector(1, 1);
        vector2 = new Vector(1, 1);
        vectorResult = vector1.subtract(vector2);
        vector1.x.should.equal(0);
        vector1.y.should.equal(0);
        vectorResult.should.equal(vector1);
        vectorResult.should.deep.equal(vector1);
        vectorResult.should.not.equal(vector2);
        vector2.x.should.equal(1);
        vector2.y.should.equal(1);
        vector1.subtract(vector2);
        vector1.x.should.equal(-1);
        vector1.y.should.equal(-1);
        vector2.x.should.equal(1);
        return vector2.y.should.equal(1);
      });
      it('should subtract a scalar and a vector', function() {
        var vector1, vectorResult;
        vector1 = new Vector(7, 7);
        vectorResult = vector1.subtract(3);
        vectorResult.should.be.vector1;
        vectorResult.should.deep.equal(vector1);
        vector1.x.should.equal(4);
        return vector1.y.should.equal(4);
      });
      it('should subtract two vectors together (new vector)', function() {
        var vector1, vector2, vector4, vectorResult;
        vector1 = new Vector(1, 1);
        vector2 = new Vector(1, 1);
        vectorResult = vector1.subtract(vector1, vector2);
        vectorResult.should.not.equal(vector1);
        vectorResult.should.not.deep.equal(vector1);
        vectorResult.should.not.equal(vector2);
        vectorResult.should.not.deep.equal(vector2);
        vectorResult.x.should.equal(0);
        vectorResult.y.should.equal(0);
        vector4 = Vector.prototype.subtract(vector1, vector2);
        vector1.x.should.equal(1);
        vector1.y.should.equal(1);
        vector2.x.should.equal(1);
        vector2.y.should.equal(1);
        vector4.x.should.equal(0);
        return vector4.y.should.equal(0);
      });
      return it('should subtract a vector and scalar together (new vector)', function() {
        var vector1, vector2, vectorResult;
        vector1 = new Vector(11, 11);
        vectorResult = vector1.subtract(vector1, 5);
        vectorResult.should.not.equal(vector1);
        vectorResult.should.not.deep.equal(vector1);
        vectorResult.x.should.equal(6);
        vectorResult.y.should.equal(6);
        vector2 = Vector.prototype.subtract(vector1, 5);
        vector1.x.should.equal(11);
        vector1.y.should.equal(11);
        vector2.x.should.equal(6);
        vector2.y.should.equal(6);
        vector2.should.not.equal(vector1);
        return vector2.should.not.deep.equal(vector1);
      });
    });
    describe('Vector: Multiply / Divide', function() {
      it('should multiply properly', function() {
        var vector1;
        vector1 = new Vector(1, 1);
        vector1.multiply(4);
        vector1.x.should.equal(4);
        vector1.y.should.equal(4);
        vector1.multiply(2);
        vector1.x.should.equal(8);
        vector1.y.should.equal(8);
        vector1.multiply(0);
        vector1.x.should.equal(0);
        return vector1.y.should.equal(0);
      });
      return it('should divide properly', function() {
        var vector1;
        vector1 = new Vector(4, 4);
        vector1.divide(2);
        vector1.x.should.equal(2);
        vector1.y.should.equal(2);
        vector1.divide(0);
        vector1.x.should.equal(2);
        vector1.y.should.equal(2);
        vector1.divide(2);
        vector1.x.should.equal(1);
        vector1.y.should.equal(1);
        vector1.x = 0;
        vector1.y = 0;
        vector1.divide(2);
        vector1.x.should.equal(0);
        return vector1.y.should.equal(0);
      });
    });
    describe('Vector: Calucations', function() {
      it('should properly calculate magnitude', function() {
        var mag, vector;
        vector = new Vector(4, 4);
        mag = vector.magnitude().should.equal(5.656854249492381);
        vector = new Vector(0, 0);
        mag = vector.magnitude().should.equal(0);
        vector = new Vector(1, 1);
        return mag = vector.magnitude().should.equal(1.4142135623730951);
      });
      it('should properly limit a vector', function() {
        var vector;
        vector = new Vector(4, 4);
        vector.limit(2);
        vector.x.should.equal(1.414213562373095);
        vector.y.should.equal(1.414213562373095);
        vector = new Vector(20, 40);
        vector.limit(4);
        vector.x.should.equal(1.7888543819998317);
        return vector.y.should.equal(3.5777087639996634);
      });
      it('should normalize properly', function() {
        var vector;
        vector = new Vector(4, 4);
        vector.normalize();
        vector.x.should.equal(0.7071067811865475);
        vector.y.should.equal(0.7071067811865475);
        return Math.round(vector.magnitude()).should.equal(1);
      });
      return it('should calculate angle properly', function() {
        var vector1, vector2;
        vector1 = new Vector(2, 4);
        vector2 = new Vector(5, 6);
        vector1.angle(vector2).should.equal(13.240519915187184);
        vector1 = new Vector(0, 0);
        vector2 = new Vector(5, 6);
        return vector1.angle(vector2).should.equal(0);
      });
    });
    describe('Vector: Dot Product', function() {
      return it('should calculate dot product properly', function() {
        var dotProduct, vector1, vector2;
        vector1 = new Vector(2, 4);
        vector2 = new Vector(5, 7);
        dotProduct = vector1.dotProduct(vector2);
        dotProduct.should.equal(38);
        vector1 = new Vector(0, 0);
        vector2 = new Vector(5, 7);
        dotProduct = vector1.dotProduct(vector2);
        return dotProduct.should.equal(0, 0);
      });
    });
    return describe('Vector: Distance', function() {
      return it('should calculate distance', function() {
        var dist, vector1, vector2;
        vector1 = new Vector(4, 4);
        vector2 = new Vector(8, 8);
        dist = vector1.distance(vector2);
        dist.should.equal(5.656854249492381);
        vector1 = new Vector(0, 0);
        vector2 = new Vector(2, 2);
        dist = vector1.distance(vector2);
        return dist.should.equal(2.8284271247461903);
      });
    });
  });

}).call(this);
