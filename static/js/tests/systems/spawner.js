// Generated by CoffeeScript 1.4.0
(function() {

  define(['systems/spawner', 'entity', 'entities', 'assemblages/assemblages'], function(Spawner, Entity, Entities, Assemblages) {
    return describe('Spawner System', function() {
      var entities, entityFemale, entityMale, spawner;
      entityMale = Assemblages.human();
      entityFemale = Assemblages.human();
      entityMale.components.position.x = 10;
      entityMale.components.position.y = 10;
      entityMale.components.human.age = 22;
      entityMale.components.human.sex = 'male';
      entityFemale.components.position.x = 10;
      entityFemale.components.position.y = 11;
      entityFemale.components.human.age = 22;
      entityFemale.components.human.sex = 'female';
      entities = new Entities().add(entityMale).add(entityFemale);
      spawner = new Spawner(entities);
      describe('findMate()', function() {
        entityFemale.components.human.findMateChance = 1;
        it('should have no mate', function() {
          var hasMate;
          hasMate = entityFemale.components.human.mateId != null;
          return hasMate.should.be["false"];
        });
        it('should find a mate', function() {
          return spawner.findMate(entityFemale, [entityMale.id]).should.be["true"];
        });
        return it('female and males should be mates', function() {
          var hasMate;
          hasMate = entityFemale.components.human.mateId != null;
          hasMate.should.be["true"];
          entityFemale.components.human.mateId.should.equal(entityMale.id);
          return entityMale.components.human.mateId.should.equal(entityFemale.id);
        });
      });
      describe('conceive()', function() {
        it('should not get pregnant if chance is 0', function() {
          entityFemale.components.human.pregnancyChance = 0;
          entityFemale.components.human.isPregnant.should.be["false"];
          spawner.conceive(entityFemale, [entityMale.id]);
          return entityFemale.components.human.isPregnant.should.be["false"];
        });
        return it('should get pregnant if chance is 1', function() {
          entityFemale.components.human.pregnancyChance = 1;
          entityFemale.components.human.isPregnant.should.be["false"];
          spawner.conceive(entityFemale, [entityMale.id]);
          entityFemale.components.human.isPregnant.should.be["true"];
          return entityFemale.components.human.gestationTimeLeft.should.equal(entityFemale.components.human.gestationLength);
        });
      });
      describe('canBirth()', function() {
        return it('should return false when gestationtimeleft is above 0', function() {
          entityFemale.components.human.gestationTimeLeft.should.equal(entityFemale.components.human.gestationLength);
          spawner.canBirth(entityFemale).should.be["false"];
          return entityFemale.components.human.gestationTimeLeft.should.equal(entityFemale.components.human.gestationLength - entityFemale.components.human.ageSpeed);
        });
      });
      return describe('makeBaby()', function() {
        return it('should make a baby when it can', function() {});
      });
    });
  });

}).call(this);
