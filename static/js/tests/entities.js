// Generated by CoffeeScript 1.4.0
(function() {

  define(['entities', 'entity'], function(Entities, Entity) {
    return describe('Entities: Setup', function() {
      it('should setup Entities', function() {
        var entities;
        entities = new Entities();
        entities.should.not.equal(void 0);
        return entities._currentId.should.equal(0);
      });
      it('should add entity', function() {
        var entities, entity, entity2;
        entities = new Entities();
        entities.should.not.equal(void 0);
        entities._currentId.should.equal(0);
        entity = new Entity();
        entities.add(entity);
        entities.entities.should.deep.equal({
          '0': entity
        });
        entities._currentId.should.equal(1);
        entity2 = new Entity();
        entities.add(entity2);
        entities.entities.should.deep.equal({
          '0': entity,
          '1': entity2
        });
        return entities._currentId.should.equal(2);
      });
      it('should remove an entity by id', function() {
        var entities, entity;
        entities = new Entities();
        entity = new Entity();
        entities.add(entity);
        entities.remove('0');
        entities.entities.should.deep.equal({});
        return entities._currentId.should.equal(1);
      });
      it('should remove an entity by object', function() {
        var entities, entity;
        entities = new Entities();
        entity = new Entity();
        entity.addComponent('position');
        entities.add(entity);
        entities.entitiesIndex.position.should.deep.equal({
          0: entity
        });
        entities.remove(entity);
        entities.entitiesIndex.position.should.deep.equal({});
        entities.entities.should.deep.equal({});
        return entities._currentId.should.equal(1);
      });
      it('should get update index when component is added', function() {
        var entities, entitiesByComponent, entity;
        entities = new Entities();
        entity = new Entity();
        entities.add(entity);
        entities.entitiesIndex.should.deep.equal({});
        entity.addComponent('renderer');
        entity.hasComponent('renderer').should.be["true"];
        entitiesByComponent = entities._getEntities('renderer');
        entitiesByComponent.should.deep.equal({
          '0': entity
        });
        return entities.entitiesIndex.should.deep.equal({
          renderer: {
            '0': entity
          }
        });
      });
      it('should return entities with components when entity is created then added', function() {
        var entities, entity;
        entity = new Entity();
        entity.addComponent('renderer');
        entities = new Entities();
        entities.entitiesIndex.should.deep.equal({});
        entities.add(entity);
        entities.entities.should.deep.equal({
          '0': entity
        });
        return entities.entitiesIndex.should.deep.equal({
          'renderer': {
            '0': entity
          }
        });
      });
      return it('should update index when component is removed from entity', function() {
        var entities, entity;
        entities = new Entities();
        entity = new Entity();
        entities.add(entity);
        entity.addComponent('renderer');
        entity.hasComponent('renderer').should.be["true"];
        entity.removeComponent('renderer');
        entity.hasComponent('renderer').should.be["false"];
        return entities.entitiesIndex.should.deep.equal({
          renderer: {}
        });
      });
    });
  });

}).call(this);
