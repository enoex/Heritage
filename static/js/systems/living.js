// Generated by CoffeeScript 1.4.0
(function() {

  define(['entity', 'assemblages/assemblages'], function(Entity, Assemblages) {
    var Living;
    Living = (function() {

      function Living(entities) {
        this.entities = entities;
        return this;
      }

      Living.prototype.updateHuman = function(entity) {
        var health, human, newZombie, physics;
        human = entity.components.human;
        physics = entity.components.physics;
        health = entity.components.health;
        human.age += 0.1;
        physics.maxSpeed = human.getMaxSpeed();
        human.resources = human.calculateResources();
        health.health = human.calculateHealth(health.health);
        human.isDead = human.getIsDead(health.health);
        if (human.isDead && human.hasZombieInfection) {
          newZombie = Assemblages.zombie();
          if (entity.hasComponent('userMovable')) {
            newZombie.addComponent('userMovable');
          }
          newZombie.components.position = entity.components.position.copy();
          this.entities.add(newZombie);
        }
        if (human.isDead) {
          this.entities.remove(entity);
        }
        return true;
      };

      Living.prototype.updateZombie = function(entity) {
        var health, physics, zombie;
        zombie = entity.components.zombie;
        physics = entity.components.physics;
        health = entity.components.health;
        zombie.age += 0.1;
        physics.maxSpeed = zombie.getMaxSpeed();
        zombie.resources = zombie.calculateResources();
        health.health = zombie.calculateHealth(health.health);
        zombie.isDead = zombie.getIsDead(health.health);
        if (zombie.isDead) {
          this.entities.remove(entity);
        }
        return true;
      };

      Living.prototype.tick = function(delta) {
        var entity, id, _ref, _ref1;
        _ref = this.entities.entitiesIndex['human'];
        for (id in _ref) {
          entity = _ref[id];
          this.updateHuman(entity);
        }
        _ref1 = this.entities.entitiesIndex['zombie'];
        for (id in _ref1) {
          entity = _ref1[id];
          this.updateZombie(entity);
        }
        return this;
      };

      return Living;

    })();
    return Living;
  });

}).call(this);
