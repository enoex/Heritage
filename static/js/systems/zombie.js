// Generated by CoffeeScript 1.4.0
(function() {

  define(['entity', 'assemblages/assemblages'], function(Entity, Assemblages) {
    var Zombie;
    Zombie = (function() {

      Zombie.ageSpeed = 0.05;

      function Zombie(entities) {
        this.entities = entities;
        return this;
      }

      Zombie.prototype.calculateResources = function(entity) {
        var resources;
        resources = entity.components.resources.resources;
        if (resources > 0) {
          resources -= entity.components.zombie.decayRate;
        }
        resources += this.updateResourcesFromCombat(entity);
        return resources;
      };

      Zombie.prototype.updateResourcesFromCombat = function(entity) {
        var combat, resources;
        combat = entity.components.combat;
        if (!combat) {
          return 0;
        }
        resources = 0;
        if (combat.damageDealt.length > 0) {
          resources += 10 * combat.damageDealt.length;
        }
        return resources;
      };

      Zombie.prototype.calculateMaxSpeed = function(entity) {
        var maxSpeed, modifier, physics, resources;
        physics = entity.components.physics;
        maxSpeed = physics.maxSpeed;
        resources = entity.components.resources;
        if (!resources) {
          return false;
        }
        if (resources.resources < 10) {
          maxSpeed = physics.baseMaxSpeed / 2;
        } else if (resources.resources < 20) {
          maxSpeed = physics.baseMaxSpeed / 1.3;
        } else if (resources.resources > 100) {
          modifier = (resources.resources / 4) * 0.1;
          maxSpeed = physics.baseMaxSpeed + modifier | 0;
        } else {
          maxSpeed = physics.baseMaxSpeed;
        }
        return maxSpeed;
      };

      Zombie.prototype.updateCombatComponent = function(entity) {
        var combat, modifier, resources;
        combat = entity.components.combat;
        resources = entity.components.resources;
        if (!resources) {
          return false;
        }
        if (resources.resources < 10) {
          combat.attack = combat.baseAttack / 3;
          combat.defense = combat.baseDefense / 3;
        } else if (resources.resources < 20) {
          combat.attack = combat.baseAttack / 2;
          combat.defense = combat.baseDefense / 2;
        } else if (resources.resources > 100) {
          modifier = (resources.resources / 4) * 0.1;
          combat.attack = combat.baseAttack + modifier | 0;
          combat.defense = combat.baseDefense + modifier | 0;
        } else {
          combat.attack = combat.baseAttack;
          combat.defense = combat.baseDefense;
        }
        return true;
      };

      Zombie.prototype.updateZombie = function(entity) {
        var combat, health, physics, resources, zombie;
        zombie = entity.components.zombie;
        physics = entity.components.physics;
        health = entity.components.health;
        resources = entity.components.resources;
        combat = entity.components.combat;
        zombie.age += Zombie.ageSpeed;
        if (combat) {
          this.updateCombatComponent(entity);
        }
        if (resources) {
          resources.resources = this.calculateResources(entity);
        }
        if (physics) {
          physics.maxSpeed = this.calculateMaxSpeed(entity);
        }
        if (health) {
          zombie.isDead = zombie.getIsDead(health.health);
        }
        if (zombie.isDead) {
          this.entities.remove(entity);
        }
        return true;
      };

      Zombie.prototype.tick = function(delta) {
        var entity, id, _ref;
        _ref = this.entities.entitiesIndex.zombie;
        for (id in _ref) {
          entity = _ref[id];
          this.updateZombie(entity);
        }
        return this;
      };

      return Zombie;

    })();
    return Zombie;
  });

}).call(this);
