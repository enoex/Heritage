// Generated by CoffeeScript 1.4.0
(function() {

  define(['entity', 'assemblages/assemblages'], function(Entity, Assemblages) {
    var Zombie;
    Zombie = (function() {

      Zombie.ageSpeed = 0.05;

      function Zombie(entities) {
        this.entities = entities;
        return this;
      }

      Zombie.prototype.calculateResources = function(entity) {
        var resources;
        resources = entity.components.resources.resources;
        if (resources > 0) {
          resources -= entity.components.zombie.decayRate;
        }
        if (entity.components.combat) {
          resources += this.updateResourcesFromCombat(entity);
        }
        return resources;
      };

      Zombie.prototype.updateResourcesFromCombat = function(entity) {
        var combat, resources;
        combat = entity.components.combat;
        if (!combat) {
          return 0;
        }
        resources = 0;
        if (combat.damageDealt.length > 0) {
          resources += 10 * combat.damageDealt.length;
        }
        return resources;
      };

      Zombie.prototype.calculateHealth = function(entity) {
        var combat, damage, health, resources, _i, _len, _ref;
        health = entity.components.health.health;
        combat = entity.components.combat;
        resources = entity.components.resources.resources;
        if (combat && combat.damageDealt.length > 0) {
          _ref = combat.damageDealt;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            damage = _ref[_i];
            health += damage[1] * 0.5 | 0;
          }
        }
        if (resources && resources < 1) {
          health -= 0.1;
        }
        return health;
      };

      Zombie.prototype.calculateMaxSpeed = function(entity) {
        var maxSpeed, modifier, physics, resources;
        physics = entity.components.physics;
        maxSpeed = physics.maxSpeed;
        resources = entity.components.resources;
        if (!resources) {
          return false;
        }
        if (resources.resources < 10) {
          maxSpeed = physics.baseMaxSpeed / 2;
        } else if (resources.resources < 20) {
          maxSpeed = physics.baseMaxSpeed / 1.3;
        } else if (resources.resources > 100) {
          modifier = (resources.resources / 4) * 0.1;
          maxSpeed = physics.baseMaxSpeed + modifier | 0;
        } else {
          maxSpeed = physics.baseMaxSpeed;
        }
        return maxSpeed;
      };

      Zombie.prototype.updateCombatComponent = function(entity) {
        var combat, modifier, resources;
        combat = entity.components.combat;
        resources = entity.components.resources;
        if (!resources) {
          return false;
        }
        if (resources.resources < 10) {
          combat.attack = combat.baseAttack / 3;
          combat.defense = combat.baseDefense / 3;
        } else if (resources.resources < 20) {
          combat.attack = combat.baseAttack / 2;
          combat.defense = combat.baseDefense / 2;
        } else if (resources.resources > 100) {
          modifier = (resources.resources / 4) * 0.1;
          combat.attack = combat.baseAttack + modifier | 0;
          combat.defense = combat.baseDefense + (modifier / 4 | 0);
        } else {
          combat.attack = combat.baseAttack;
          combat.defense = combat.baseDefense;
        }
        if (combat.neighbors && combat.neighbors.zombie) {
          combat.attack += combat.neighbors.zombie.length;
          combat.defense += combat.neighbors.zombie.length * 1.2;
        }
        if (combat.neighbors && combat.neighbors.human) {
          combat.attack -= combat.neighbors.human.length * 0.2;
          combat.defense -= combat.neighbors.human.length * 1.2;
        }
        return true;
      };

      Zombie.prototype.updateZombie = function(entity) {
        var combat, health, neighbors, physics, resources, zombie, zombies;
        zombie = entity.components.zombie;
        physics = entity.components.physics;
        health = entity.components.health;
        resources = entity.components.resources;
        combat = entity.components.combat;
        zombie.age += Zombie.ageSpeed;
        neighbors = null;
        if (combat) {
          this.updateCombatComponent(entity);
          if (combat.neighbors && combat.neighbors.zombie) {
            neighbors = combat.neighbors.zombie;
          }
        }
        if (resources) {
          resources.resources = this.calculateResources(entity);
        }
        if (health) {
          health.health = this.calculateHealth(entity);
        }
        if (physics) {
          physics.maxSpeed = this.calculateMaxSpeed(entity);
        }
        if (health) {
          zombie.isDead = zombie.getIsDead(health.health);
        }
        if (zombie.isDead) {
          this.entities.remove(entity);
          if (entity.components.userMovable) {
            if (neighbors && neighbors.length > 0) {
              this.entities.PC = neighbors[0];
              this.entities.entities[neighbors[0]].addComponent('userMovable');
            } else {
              zombies = this.entities.entitiesIndex.zombie;
              this.entities.PC = zombies[Object.keys(zombies)[0]].id;
              zombies[Object.keys(zombies)[0]].addComponent('userMovable');
            }
          }
        }
        return true;
      };

      Zombie.prototype.tick = function(delta) {
        var entity, id, _ref;
        _ref = this.entities.entitiesIndex.zombie;
        for (id in _ref) {
          entity = _ref[id];
          this.updateZombie(entity);
        }
        return this;
      };

      return Zombie;

    })();
    return Zombie;
  });

}).call(this);
