// Generated by CoffeeScript 1.4.0
(function() {

  define(['entity', 'assemblages/assemblages', 'systems/world'], function(Entity, Assemblages, WorldSystem) {
    var Living;
    Living = (function() {

      function Living(entities) {
        this.entities = entities;
        return this;
      }

      Living.prototype.calculateResources = function(entity, neighbors) {
        var human, resources;
        resources = entity.components.resources.resources;
        human = entity.components.human;
        if (human.age < 20) {
          resources -= 0.005 + ((20 - human.age) / 46);
        } else if (this.age > 60) {
          resources -= 0.1 + (human.age * 0.0005);
        } else {
          resources -= 0.01;
          if (human.isPregnant) {
            resources -= 0.05;
          }
        }
        resources -= neighbors.length * 0.08;
        return resources;
      };

      Living.prototype.calculateHealth = function(entity) {
        var health, human, resources;
        human = entity.components.human;
        resources = entity.components.resources.resources;
        health = entity.components.health.health;
        if (human.age > 70) {
          health -= 0.1 + (human.age * 0.005);
        }
        if (human.age > 100) {
          if (Math.random() < 0.1) {
            health = -1;
          }
        }
        health += 0.01;
        if (human.hasZombieInfection) {
          health -= 5;
        }
        return health;
      };

      Living.prototype.updateMaxSpeed = function(entity, neighbors) {
        var human, maxForce, maxSpeed, physics;
        physics = entity.components.physics;
        human = entity.components.human;
        maxSpeed = 0;
        if (human.age < 2) {
          maxSpeed = 3;
        } else if (human.age < 10) {
          maxSpeed = 5;
        } else if (human.age < 60) {
          maxSpeed = 8;
        } else if (human.age < 70) {
          maxSpeed = 4;
        } else {
          maxSpeed = 3;
        }
        maxSpeed = maxSpeed - (neighbors.length * 0.9);
        if (maxSpeed < 0) {
          maxSpeed = 1;
        }
        maxForce = 0.5 - (neighbors.length * 0.1);
        if (human.health < 50) {
          maxSped -= 1 / (human.health * 0.1);
        }
        physics.maxSpeed = maxSpeed;
        physics.maxForce = maxForce;
        return maxSpeed;
      };

      Living.prototype.updateCombatProperties = function(entity, neighbors) {
        var combat, damage, human, _i, _j, _len, _len1, _ref, _ref1;
        human = entity.components.human;
        combat = entity.components.combat;
        if (combat.damageTaken) {
          _ref = combat.damageTaken;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            damage = _ref[_i];
            combat.baseDefense += damage[1] * 0.005;
          }
        }
        if (combat.damageDealt) {
          _ref1 = combat.damageDealt;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            damage = _ref1[_j];
            combat.baseAttack += damage[1] * 0.002;
          }
        }
        if (human.age <= 10) {
          combat.attack = combat.baseAttack / (human.age * 0.1);
          combat.defense = combat.baseDefense / (human.age * 0.1);
        } else if (human.age > 70) {
          combat.attack = combat.baseAttack - ((human.age - 70) * 0.2);
          combat.defense = combat.baseDefense - ((human.age - 70) * 0.2);
        } else {
          combat.attack = combat.baseAttack;
          combat.defense = combat.baseAttack;
        }
        combat.defense += ((neighbors.length * neighbors.length) * 0.05) * 1;
        combat.attack += neighbors.length * 0.8;
        return true;
      };

      Living.prototype.updateZombieInfection = function(entity, neighbors) {
        var chance, combat, damage, health, human, _i, _len, _ref;
        combat = entity.components.combat;
        human = entity.components.human;
        health = entity.components.health;
        human.hasZombieInfection = false;
        if (health) {
          if (combat && combat.damageTaken.length > 0) {
            chance = human.infectionScale(health.health);
            if (this.age > 70) {
              chance += 0.5;
            }
            chance -= combat.defense * 0.03;
            chance += neighbors.zombie.length * 0.01;
            _ref = combat.damageTaken;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              damage = _ref[_i];
              chance += damage[1] * 0.05;
              if (Math.random() < chance) {
                human.hasZombieInfection = true;
                human.zombieInfector = damage[0];
                this.entities.entities[human.zombieInfector].components.zombie.humansInfected.push(entity.id);
              }
            }
          }
        }
        return human.hasZombieInfection;
      };

      Living.prototype.updateHuman = function(entity) {
        var child, combat, health, human, i, len, neighbors, newZombie, physics, resources;
        human = entity.components.human;
        physics = entity.components.physics;
        health = entity.components.health;
        resources = entity.components.resources;
        combat = entity.components.combat;
        human.age += human.ageSpeed;
        neighbors = WorldSystem.prototype.getNeighborsByCreatureType(entity, this.entities, 4, ['world']);
        if (physics) {
          this.updateMaxSpeed(entity, neighbors.human);
        }
        resources.resources = this.calculateResources(entity, neighbors.human);
        if (combat) {
          this.updateCombatProperties(entity, neighbors.human);
          this.updateZombieInfection(entity, neighbors);
        }
        if (resources < 10) {
          if (Math.random() < 0.05) {
            entity.components.flocking.rules.cohesion = -1;
            entity.components.flocking.rules.align = -1;
          }
        }
        health.health = this.calculateHealth(entity);
        human.isDead = human.getIsDead(health.health);
        if (human.isDead && human.hasZombieInfection) {
          newZombie = Assemblages.zombie();
          newZombie.components.position.x = entity.components.position.x;
          newZombie.components.position.y = entity.components.position.y;
          this.entities.add(newZombie);
          if (entity.hasComponent('userMovable')) {
            newZombie.addComponent('userMovable');
            this.entities.PC = newZombie.id;
          }
        }
        if (human.isDead) {
          if (!human.hasZombieInfection && entity.hasComponent('userMovable') && human.children) {
            i = 0;
            len = human.children.length;
            while (i < len) {
              if (human.children[i]) {
                child = this.entities.entities[human.children[i]];
                if (child && child.hasComponent('human') && !child.components.human.isDead) {
                  child.addComponent('userMovable');
                  this.entities.PC = child.id;
                }
                break;
              }
            }
          }
          this.entities.remove(entity);
        }
        return true;
      };

      Living.prototype.tick = function(delta) {
        var entity, id, _ref;
        _ref = this.entities.entitiesIndex['human'];
        for (id in _ref) {
          entity = _ref[id];
          this.updateHuman(entity);
        }
        return this;
      };

      return Living;

    })();
    return Living;
  });

}).call(this);
