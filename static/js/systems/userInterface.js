// Generated by CoffeeScript 1.4.0
(function() {

  define(['components/vector', 'components/world'], function(Vector, World) {
    var UserInterface, canvas;
    canvas = document.getElementById('canvas');
    UserInterface = (function() {

      function UserInterface(entities) {
        var _this = this;
        this.entities = entities;
        this.mouse = new Vector(0, 0);
        this.$debug = document.getElementById('debug');
        canvas.addEventListener('mousemove', function(e) {
          _this.mouse.x = e.clientX;
          return _this.mouse.y = e.clientY;
        });
        return this;
      }

      UserInterface.prototype.getEntitiesUnderMouse = function(e) {
        var cell, entities, entity, grid, html, _i, _len;
        cell = World.prototype.getCellFromPosition(this.mouse);
        grid = World.grid;
        html = '';
        if (grid[cell.i] && grid[cell.i][cell.j]) {
          entities = grid[cell.i][cell.j];
          for (_i = 0, _len = entities.length; _i < _len; _i++) {
            entity = entities[_i];
            if (entity && entity.hasComponent('renderer')) {
              entity.components.renderer.isSelected = true;
            }
            html = 'ID: ' + entity.id;
            if (entity.hasComponent('human')) {
              html += '<br />' + entity.components.human.age;
              html += '<br />' + entity.components.human.children.length;
              html += '<br />' + entity.components.human.mateId;
            }
          }
        }
        if (entities) {
          this.$debug.innerHTML = html;
        }
        return entities;
      };

      UserInterface.prototype.showUserMovableInfo = function() {
        var entities, entity, html, key;
        html = '';
        entities = this.entities.entitiesIndex.userMovable;
        for (key in entities) {
          entity = entities[key];
          html = 'ID: ' + entity.id;
          html += '<br />Health: ' + entity.components.health.health;
          if (entity.hasComponent('human')) {
            html += '<br />Age: ' + entity.components.human.age;
            html += '<br />Resources: ' + entity.components.human.resources;
            html += '<br />Mate: ' + entity.components.human.mateId;
            html += '<br />Infected:' + entity.components.human.hasZombieInfection;
          }
        }
        this.$debug.innerHTML = html;
        return entities;
      };

      UserInterface.prototype.tick = function(delta) {
        this.showUserMovableInfo();
        return this;
      };

      return UserInterface;

    })();
    return UserInterface;
  });

}).call(this);
