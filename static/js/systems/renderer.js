// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['components/world'], function(World) {
    var Renderer, canvas, context, miniMapCanvas, miniMapContext;
    canvas = World.canvas;
    context = World.context;
    miniMapCanvas = document.getElementById('miniMap');
    miniMapContext = miniMapCanvas.getContext('2d');
    Renderer = (function() {

      function Renderer(entities) {
        this.tick = __bind(this.tick, this);
        this.entities = entities;
        this.canvasHalfWidth = canvas.width / 2;
        this.canvasHalfHeight = canvas.height / 2;
        return this;
      }

      Renderer.prototype.tick = function(delta) {
        var alpha, entity, id, renderPosition, size, targetX, targetY, _ref, _ref1;
        canvas.width = canvas.width;
        miniMapCanvas.width = miniMapCanvas.width;
        this.camera = {
          x: 0,
          y: 0,
          radius: 20
        };
        _ref = this.entities.entitiesIndex['userMovable'];
        for (id in _ref) {
          entity = _ref[id];
          this.camera.x = entity.components.position.x;
          this.camera.y = entity.components.position.y;
        }
        _ref1 = this.entities.entitiesIndex['renderer'];
        for (id in _ref1) {
          entity = _ref1[id];
          size = entity.components.renderer.size;
          context.save();
          renderPosition = entity.components.position;
          context.fillStyle = entity.components.renderer.color;
          if (entity.components.human) {
            alpha = Math.round((1 - (entity.components.human.age / 110)) * 10) / 10;
            if (entity.components.human.age < 20) {
              context.fillStyle = 'rgba(0,0,0,0.9)';
            } else if (entity.components.human.age > 64) {
              context.fillStyle = 'rgba(190,190,190,0.9)';
            }
            if (entity.components.human.age > 19 && entity.components.human.age < 65) {
              if (entity.components.human.sex === 'female') {
                context.fillStyle = 'rgba(255,100,255,' + alpha + ')';
              } else {
                context.fillStyle = 'rgba(100,150,200,' + alpha + ')';
              }
            }
          }
          if (entity.hasComponent('zombie')) {
            context.fillStyle = 'rgba(255,100,100,1)';
          }
          targetX = renderPosition.x - (size / 2) - this.camera.x + this.canvasHalfWidth;
          targetY = renderPosition.y - (size / 2) - this.camera.y + this.canvasHalfHeight;
          if (targetX < 0) {
            targetX = canvas.width + targetX;
          }
          if (targetY < 0) {
            targetY = canvas.height + targetY;
          }
          if (renderPosition.y > this.camera.y + this.canvasHalfHeight) {
            targetY = renderPosition.y - (size / 2) - this.canvasHalfHeight;
          }
          if (renderPosition.x > this.camera.x + this.canvasHalfWidth) {
            targetX = renderPosition.x - (size / 2) - this.canvasHalfWidth;
          }
          context.fillRect(targetX, targetY, size, size);
          if (entity.hasComponent('userMovable')) {
            context.strokeStyle = 'rgba(100,150,200,1)';
            context.lineWidth = 2;
            context.strokeRect(targetX, targetY, size, size);
          }
          context.restore();
          miniMapContext.save();
          miniMapContext.fillStyle = 'rgba(20,20,20,1)';
          if (entity.hasComponent('zombie')) {
            miniMapContext.fillStyle = 'rgba(255,20,20,1)';
          }
          if (entity.hasComponent('userMovable')) {
            miniMapContext.fillStyle = 'rgba(20,255,20,1)';
            miniMapContext.strokeRect((renderPosition.x / 2) - this.canvasHalfWidth / 4, (renderPosition.y / 2) - this.canvasHalfHeight / 4, this.canvasHalfWidth / 2, this.canvasHalfHeight / 2);
          }
          miniMapContext.fillRect(renderPosition.x / 2 - 1, renderPosition.y / 2 - 1, 3, 3);
          miniMapContext.restore();
        }
        return this;
      };

      return Renderer;

    })();
    return Renderer;
  });

}).call(this);
